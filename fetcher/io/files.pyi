from pathlib import Path
from typing import Any, Generator
from abc import abstractmethod
import requests

class PathAPIbase:
    _path: Path
    def __str__(self) -> str: ...
    def __getattr__(self, attr: str) -> Any: ...

class PathAPIUp(PathAPIbase):
    def __init__(
        self, path: str | Path, f_type: Any, path_api: str | Path, api: Any
    ) -> None: ...
    @property
    def path_api_rel(self) -> Path: ...
    def __repr__(self) -> str: ...
    def push(self) -> requests.Response: ...
    def glob(self, pattern: str) -> Generator["PathAPIUp", Any, None]: ...
    def rglob(self, pattern: str) -> Generator["PathAPIUp", Any, None]: ...

class PathAPIDown(PathAPIbase):
    def __init__(self, path: str | Path, file_id: str, api: Any) -> None: ...
    def __repr__(self) -> str: ...
    def get(self, mkdir: bool = True, parents: bool = True) -> requests.Response: ...

class Uploader:
    @abstractmethod
    def put(
        self, path: Path, type: str, path_api: str | None = None
    ) -> requests.Response: ...

class APIUploader(Uploader):
    def __init__(self, url: str) -> None: ...
    def put(
        self, path: Path, type: str, path_api: str | None = None
    ) -> requests.Response: ...

class Downloader:
    def __init__(self, path: str | Path | None): ...
    @abstractmethod
    def get(self, url: str, path: Path) -> requests.Response: ...

class APIDownloader(Downloader):
    def get(self, url: str, path: Path) -> requests.Response: ...
