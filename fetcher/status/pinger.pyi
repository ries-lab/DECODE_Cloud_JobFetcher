from abc import ABC, abstractmethod
from typing import Callable

class Pinger(ABC):
    @abstractmethod
    def __init__(self, ping: Callable[[], bool], timeout: int | float = 60): ...
    @abstractmethod
    def start(self) -> None: ...
    @abstractmethod
    def stop(self) -> None: ...

class ParallelPinger:
    def __init__(self, ping: Callable[[], bool], timeout: int | float = 60): ...
    def start(self) -> None: ...
    def stop(self) -> None: ...

class SerialPinger:
    def __init__(self, ping: Callable[[], bool], timeout: int | float = 60): ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
